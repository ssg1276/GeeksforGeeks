Create a link list of size N according to the given input literals. Each integer input is accompanied by an indicator which can either be 0 or 1. If it is 0, insert the integer in the beginning of the link list. If it is 1, insert the integer at the end of the link list. 
Hint: When inserting at the end, make sure that you handle NULL explicitly.

Example 1:

Input:
LinkedList: 9->0->5->1->6->1->2->0->5->0
Output: 5 2 9 5 6

SOLUTION;-
class Solution{
  public:
    //Function to insert a node at the beginning of the linked list.
   Node *insertAtBegining(Node *head, int x) {
       Node* temp = new Node(x);
       temp->next = head;
       head = temp;
    }
    
    
    //Function to insert a node at the end of the linked list.
    Node *insertAtEnd(Node *head, int x)  {
       Node* temp = new Node(x);
       if(head == NULL) {
           head = temp;
           return head;
       }
       else {
           Node* curr = head;
           while(curr->next!=NULL) {
               curr = curr->next;
           }
           curr->next = temp;
           return head;
       }
    }
};
