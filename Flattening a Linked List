Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of the next pointer.
For more clarity have a look at the printList() function in the driver code.


Example 1:
Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.

SOLUTION:-

/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
    
Node* mergeSort(Node* list1,Node* list2){
    Node* dummyNode=new Node(-1);
    Node* temp=dummyNode;
    while(list1!=NULL && list2!=NULL){
        if(list1->data < list2->data){
            temp->bottom=list1;
            temp=list1;
            list1=list1->bottom;
        }
        else{
            temp->bottom=list2;
            temp=list2;
            list2=list2->bottom;
        }
        if(list1) temp->bottom=list1;
        if(list2) temp->bottom=list2;
        
        temp->next=NULL;
        
    }
    return dummyNode->bottom;
}    
    
    
    
Node *flatten(Node *root)
{
   // Your code here
   if(root==NULL|| root->next==NULL){
       return root;
   }
   Node* mergeHead=flatten(root->next);
   return mergeSort(root,mergeHead);
}
