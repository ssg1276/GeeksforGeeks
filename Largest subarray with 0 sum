Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.


SOLUTION:-
class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        map<int,int>mpp;
        int sum=0;
        int maxLen=0;
        for(int i=0;i<n;i++){
            sum+=A[i];
            if(sum==0){
                maxLen=max(maxLen, i+1);
            }
            if(mpp.find(sum)!=mpp.end()){
                int len=i-mpp[sum];
                maxLen=max(maxLen,len);
            }
            if(mpp.find(sum)==mpp.end()){
                mpp[sum]=i;
            }
        }
        return maxLen;
    }
};
