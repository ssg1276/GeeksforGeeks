Given an integer array arr of size N and an integer k, return the number of good subarrays of arr.
A good array is an array where the number of different integers in that is exactly k.

For example, {1, 3, 4, 4, 1} has 3 different integers: 1, 3, and 4.
Note : A subarray is a contiguous part of an array.

Example 1:

Input:
N = 5
k = 2
arr[ ] = {1, 2, 1, 2, 3}
Output: 7

SOLUTION:-
class Solution {
  public:
    
    int count(vector<int> &arr, int N, int k){
        if(k==0){
            return 0;
        }
        int l=0,r=0,cnt=0,size=0;
        vector<int> mpp(N+1,0);
        while(r<N){
               if(mpp[arr[r]] == 0){
                size++;
            }
            mpp[arr[r]]++;
            while(size>k){
                mpp[arr[l]]--;
                if(mpp[arr[l]]==0){
                    size--;
                }
                l++;
            }
            cnt+=(r-l+1);
            r++;
        }
        return cnt;
    }
    int subarrayCount(vector<int> &arr, int N, int k) {
        // code here
        return count(arr,N,k)-count(arr,N,k-1);
    }
};
