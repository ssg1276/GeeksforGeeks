We have an horizontal number line. On that number line, we have gas stations at positions stations[0], stations[1], ..., stations[N-1], where N = size of the stations array. Now, we add K more gas stations so that D, the maximum distance between adjacent gas stations, is minimized. We have to find the smallest possible value of D. Find the answer exactly to 2 decimal places.

Example 1:

Input:
N = 10
stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
K = 9
Output: 0.50
Explanation: Each of the 9 stations can be added mid way between all the existing adjacent stations.
Example 2:

Input:
N = 10
stations = [3,6,12,19,33,44,67,72,89,95] 
K = 2 
Output: 14.00 
Explanation: Construction of gas stations at 8th(between 72 and 89) and 6th(between 44 and 67) locations.


SOLUTION:-
class Solution {
  public:
   
   int numGasStat(vector<int> &arr, long double diff){
       int cnt=0;
       for(int i=1;i<arr.size();i++){
           int numberInBetween=(arr[i]-arr[i-1])/diff;
           if(numberInBetween==((arr[i]-arr[i-1])*diff)){
               numberInBetween--;
           }
         cnt+=numberInBetween;
       }
       return cnt;
   }
   
   
   
   
    double findSmallestMaxDist(vector<int> &stations, int K){
      // Code here
      int n=stations.size();
      long double low=0;
      long double high=0;
      for(int i=0;i<n;i++){
		high=max(high,(long double)(stations[i+1]-stations[i]));
    	}	
    	while(high-low>1e-6){
		long double mid=(low+high)/(2.0);
		int cnt=numGasStat(stations,mid);
		if(cnt>K){
			low=mid;
		}
		else{
			high=mid;
		}
	}
	return high;
    }
};
