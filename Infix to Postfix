Given an infix expression in the form of string str. Convert this infix expression to postfix expression.

Infix expression: The expression of the form a op b. When an operator is in-between every pair of operands.
Postfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.
Note: The order of precedence is: ^ greater than * equals to / greater than + equals to -. Ignore the right associativity of ^.
Example 1:

Input: str = "a+b*(c^d-e)^(f+g*h)-i"
Output: abcd^e-fgh*+^*+i-

SOLUTION:-
class Solution {
  public:
    // Function to convert an infix expression to a postfix expression.
    int pre(char c){
        if(c=='^')
        return 3;
        else if(c=='*' || c=='/')
        return 2;
        else if(c=='+' || c=='-')
        return 1;
        else
        return -1;
    }
    string infixToPostfix(string s) {
        // Your code here
        stack<char> st;
        string ans;
        
        for(int i=0;i<s.length();i++){
            char c=s[i];
            if(c>='a' && c<='z' || c>='A' && c<='Z' || c>='0' && c<='9'){
                ans+=c;
            }
            else if(c=='('){
                st.push(c);
            }
            else if(c==')'){
                while(st.top()!='('){
                    ans+=st.top();
                    st.pop();
                }
                st.pop();
            }
            else{
                while(!st.empty() && pre(c)<=pre(st.top())){
                    ans+=st.top();
                    st.pop();
                }
                st.push(c);
            }
        }
        while(!st.empty()){
            ans+=st.top();
            st.pop();
        }
        
        return ans;
    }
};
