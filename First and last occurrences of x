Given a sorted array arr containing n elements with possibly some duplicate, the task is to find the first and last occurrences of an element x in the given array.
Note: If the number x is not found in the array then return both the indices as -1.
Example 1:

Input:
n=9, x=5
arr[] = { 1, 3, 5, 5, 5, 5, 67, 123, 125 }
Output:  
2 5
Explanation: 
First occurrence of 5 is at index 2 and last occurrence of 5 is at index 5. 

SOLUTION:-
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    vector<int> find(int arr[], int n , int x )
    {
        // code here
        vector<int>ans;
        int l=0;
        int h=n-1;
        int first=-1;
        int end=-1;
        while(l<=h){
            int mid=(l+h)/2;
            if(arr[mid]==x){
                first=mid;
                h=mid-1;
            }
            else if(arr[mid]<x){
                l=mid+1;
            }
            else{
                h=mid-1;
            }
        }
        l=0;
        h=n-1;
        while(l<=h){
            int mid=(l+h)/2;
            if(arr[mid]==x){
                end=mid;
                l=mid+1;
            }
            else if(arr[mid]>x){
                h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        vector<int> temp={first,end};
        ans=temp;
        
        return ans;
        
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,x;
        cin>>n>>x;
        int arr[n],i;
        for(i=0;i<n;i++)
        cin>>arr[i];
        vector<int> ans;
        Solution ob;
        ans=ob.find(arr,n,x);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
    return 0;
}



// } Driver Code Ends
